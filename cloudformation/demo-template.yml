# After creating a stack with this template, you must update the 2 Lambda
# functions that it creates with the appropriate code by uploading the
# demo application's deployment package (which can be created via
# 'make lambda-package'). The functions that this template creates are only
# intended to be placeholders.
#
# Updating a stack in a way that changes the API Gateway API or its associated
# resources requires that you redeploy the API via some other method.
# Unfortunately, CloudFormation will not automatically create an updated
# deployment.

AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'

Description: SippyCup Demo Application

Parameters:

  HostedZoneName:
    Description: "Only required if the custom domain should be automatically created via Route53"
    Type: "String"

  Domain:
    Description: "Only required if the API will be served on a custom domain"
    Type: "String"

  SslCertificateArn:
    Description: "Only required if the API will be served on a custom domain"
    Type: "String"

  DeploymentBucket:
    Description: "The S3 bucket where the deployment package is found"
    Type: "String"

  DeploymentKey:
    Description: "The S3 object key where the deployment package is found"
    Type: "String"

Conditions:

  UseCustomDomain: !Not
    - !Equals [!Ref Domain, '']

  UseRoute53: !And
    - !Not
      - !Equals [!Ref HostedZoneName, '']
    - !Not
      - !Equals [!Ref Domain, '']

Globals:
  Function:
    Handler: "lambda_function.lambda_handler"
    MemorySize: 128
    Timeout: 3
    CodeUri:
      Bucket: !Ref "DeploymentBucket"
      Key: !Ref "DeploymentKey"
  Api:
    Variables:
      SIPPYCUP_SCRIPT_NAME_BASE: "/"

Resources:

  LambdaFunction27:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Sippy Cup Demo Application (Python 2.7)"
      Runtime: "python2.7"
      Events:
        ApiRoot:
          Type: Api
          Properties:
            Path: /python27
            Method: any
        ApiProxy:
          Type: Api
          Properties:
            Path: /python27/{proxy+}
            Method: any

  LambdaFunction36:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Sippy Cup Demo Application (Python 2.7)"
      Runtime: "python3.6"
      Events:
        ApiRoot:
          Type: Api
          Properties:
            Path: /python36
            Method: any
        ApiProxy:
          Type: Api
          Properties:
            Path: /python36/{proxy+}
            Method: any

  ApiGatewayDomain:
    Type: "AWS::ApiGateway::DomainName"
    Condition: UseCustomDomain
    Properties:
      DomainName: !Ref Domain
      CertificateArn: !Ref SslCertificateArn

  ApiGatewayDomainMapping:
    DependsOn: "ApiGatewayDomain"
    Type: "AWS::ApiGateway::BasePathMapping"
    Condition: UseCustomDomain
    Properties:
      DomainName: !Ref Domain
      # Not the following 2 !Ref resources are unofficial and could
      # break without notice when a stack is updated
      RestApiId: !Ref ServerlessRestApi
      Stage: !Ref ServerlessRestApiProdStage

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Condition: UseRoute53
    Properties:
      HostedZoneName: !Sub "${HostedZoneName}."
      Name: !Sub "${Domain}."
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !GetAtt ["ApiGatewayDomain", "DistributionDomainName"]

Outputs:
  ApiDomain:
    Description: The domain the API is hosted on
    Value: !If
      - UseCustomDomain
      - !Ref Domain
      - !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"

  ApiPython27Root:
    Description: The root URL of the Python 2.7 API
    Value: !If
      - UseCustomDomain
      - !Sub "https://${Domain}/python27"
      - !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/demo/python27"

  ApiPython27Hello:
    Description: The default "hello" URL of the Python 2.7 API
    Value: !If
      - UseCustomDomain
      - !Sub "https://${Domain}/python27/hello"
      - !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/demo/python27/hello"

  ApiPython27HelloParam:
    Description: The "hello" URL of the Python 2.7 API with a parameter
    Value: !If
      - UseCustomDomain
      - !Sub "https://${Domain}/python27/hello/you"
      - !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/demo/python27/hello/you"

  ApiPython36Root:
    Description: The root URL of the Python 3.6 API
    Value: !If
      - UseCustomDomain
      - !Sub "https://${Domain}/python36"
      - !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/demo/python36"

  ApiPython36Hello:
    Description: The default "hello" URL of the Python 3.6 API
    Value: !If
      - UseCustomDomain
      - !Sub "https://${Domain}/python36/hello"
      - !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/demo/python36/hello"

  ApiPython36HelloParam:
    Description: The "hello" URL of the Python 3.6 API with a parameter
    Value: !If
      - UseCustomDomain
      - !Sub "https://${Domain}/python36/hello/you"
      - !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/demo/python36/hello/you"

  DistributionDomainName:
    Description: "The Amazon CloudFront distribution domain name that should be mapped to the custom domain name."
    Value: !If
      - UseCustomDomain
      - !GetAtt ["ApiGatewayDomain", "DistributionDomainName"]
      - "n/a"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label: "DNS Configuration"
        Parameters:
          - Domain
          - SslCertificateArn
          - HostedZoneName
    ParameterLabels:
      HostedZoneName:
        default: What is the name of the Route53 HostedZone that should be used?
      Domain:
        default: What domain will the API be served on?
      SslCertificateArn:
        default: What is the ARN of the ACM SSL certificate to use for the custom domain?
