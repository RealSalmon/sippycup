# After creating a stack with this template, you must update the 2 Lambda
# functions that it creates with the appropriate code by uploading the
# demo application's deployment package (which can be created via
# 'make lambda-package'). The functions that this template creates are only
# intended to be placeholders.
#
# Updating a stack in a way that changes the API Gateway API or its associated
# resources requires that you redeploy the API via some other method.
# Unfortunately, CloudFormation will not automatically create an updated
# deployment.

AWSTemplateFormatVersion: 2010-09-09

Description: SippyCup Demo Application

Parameters:

  HostedZoneName:
    Description: "Only required if the custom domain should be automatically created via Route53"
    Type: "String"

  Domain:
    Description: "Only required if the API will be served on a custom domain"
    Type: "String"

  SslCertificateArn:
      Description: "Only required if the API will be served on a custom domain"
      Type: "String"

Conditions:

  UseCustomDomain: !Not
    - !Equals [!Ref Domain, '']

  UseRoute53: !And
    - !Not
      - !Equals [!Ref HostedZoneName, '']
    - !Not
      - !Equals [!Ref Domain, '']

Resources:

  # IAM role for Lambda functions
  IamRoleLambdaFunction:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: cloud-watch-logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  # Python 2.7 function
  LambdaFunctionPython27:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: "def lambda_handler(event, context): return True\n"
      Description: "Sippy Cup Demo Application (Python 2.7)"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt ["IamRoleLambdaFunction", "Arn"]
      Runtime: "python2.7"
      Timeout: 3

  # Python 3.6 function
  LambdaFunctionPython36:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: "def lambda_handler(event, context): return True"
      Description: "Sippy Cup Demo Application (Python 3.6)"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !GetAtt ["IamRoleLambdaFunction", "Arn"]
      Runtime: "python3.6"
      Timeout: 3

  # API
  ApiGatewayApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: "SippyCup Demo Application"
      Name: "SippyCup Demo Stack"

  # /python27 resource
  ApiGatewayResourcePython27Root:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ParentId: !GetAtt [ApiGatewayApi, RootResourceId]
      PathPart: python27

  # /python27 ANY method
  ApiGatewayMethodPython27Root:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ResourceId: !Ref ApiGatewayResourcePython27Root
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
        CacheKeyParameters:
          - method.request.path.proxy
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FxArn}/invocations"
          - FxArn: !GetAtt ["LambdaFunctionPython27", "Arn"]
      RequestParameters:
        method.request.path.proxy: true

  # /python27/{proxy+} resource
  ApiGatewayResourcePython27Proxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ParentId: !Ref ApiGatewayResourcePython27Root
      PathPart: "{proxy+}"

  # /python27/{proxy+} ANY method
  ApiGatewayMethodPython27Proxy:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ResourceId: !Ref ApiGatewayResourcePython27Proxy
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
        CacheKeyParameters:
          - method.request.path.proxy
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FxArn}/invocations"
          - FxArn: !GetAtt ["LambdaFunctionPython27", "Arn"]
      RequestParameters:
        method.request.path.proxy: true

  # /python36 resource
  ApiGatewayResourcePython36Root:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ParentId: !GetAtt [ApiGatewayApi, RootResourceId]
      PathPart: python36

  # /python36 ANY method
  ApiGatewayMethodPython36Root:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ResourceId: !Ref ApiGatewayResourcePython36Root
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
        CacheKeyParameters:
          - method.request.path.proxy
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FxArn}/invocations"
          - FxArn: !GetAtt ["LambdaFunctionPython36", "Arn"]
      RequestParameters:
        method.request.path.proxy: true

  # /python36/{proxy+} resource
  ApiGatewayResourcePython36Proxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ParentId: !Ref ApiGatewayResourcePython36Root
      PathPart: "{proxy+}"

  # /python36/{proxy+} ANY method
  ApiGatewayMethodPython36Proxy:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ResourceId: !Ref ApiGatewayResourcePython36Proxy
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ''
        CacheKeyParameters:
          - method.request.path.proxy
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FxArn}/invocations"
          - FxArn: !GetAtt ["LambdaFunctionPython36", "Arn"]
      RequestParameters:
        method.request.path.proxy: true

  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - ApiGatewayMethodPython27Proxy
      - ApiGatewayMethodPython27Root
      - ApiGatewayMethodPython36Proxy
      - ApiGatewayMethodPython36Root
    Properties:
      RestApiId: !Ref ApiGatewayApi

  ApiGatewayStageDemo:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      StageName: "demo"
      Description: "Demo Application for Sippy Cup"
      RestApiId: !Ref ApiGatewayApi
      DeploymentId: !Ref ApiGatewayDeployment
      Variables:
        SIPPYCUP_SCRIPT_NAME_BASE: !If
          - UseCustomDomain
          - "/"
          - "/demo"

  ApiGatewayLambdaPermissionsPython27:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt ["LambdaFunctionPython27", "Arn"]
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/*/*/*"

  ApiGatewayLambdaPermissionsPython36:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt ["LambdaFunctionPython36", "Arn"]
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/*/*/*"

  ApiGatewayDomain:
    Type: "AWS::ApiGateway::DomainName"
    Condition: UseCustomDomain
    Properties:
      DomainName: !Ref Domain
      CertificateArn: !Ref SslCertificateArn

  ApiGatewayDomainMapping:
    DependsOn: "ApiGatewayDomain"
    Type: "AWS::ApiGateway::BasePathMapping"
    Condition: UseCustomDomain
    Properties:
      DomainName: !Ref Domain
      RestApiId: !Ref ApiGatewayApi
      Stage: "demo"

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Condition: UseRoute53
    Properties:
      HostedZoneName: !Sub "${HostedZoneName}."
      Name: !Sub "${Domain}."
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !GetAtt ["ApiGatewayDomain", "DistributionDomainName"]

Outputs:
  ApiDomain:
    Description: The domain the API is hosted on
    Value: !If
      - UseCustomDomain
      - !Ref Domain
      - !Sub "${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com"

  ApiPython27Root:
    Description: The root URL of the Python 2.7 API
    Value: !If
      - UseCustomDomain
      - !Sub "https://${Domain}/python27"
      - !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/demo/python27"

  ApiPython27Hello:
    Description: The default "hello" URL of the Python 2.7 API
    Value: !If
      - UseCustomDomain
      - !Sub "https://${Domain}/python27/hello"
      - !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/demo/python27/hello"

  ApiPython27HelloParam:
    Description: The "hello" URL of the Python 2.7 API with a parameter
    Value: !If
      - UseCustomDomain
      - !Sub "https://${Domain}/python27/hello/you"
      - !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/demo/python27/hello/you"

  ApiPython36Root:
    Description: The root URL of the Python 3.6 API
    Value: !If
      - UseCustomDomain
      - !Sub "https://${Domain}/python36"
      - !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/demo/python36"

  ApiPython36Hello:
    Description: The default "hello" URL of the Python 3.6 API
    Value: !If
      - UseCustomDomain
      - !Sub "https://${Domain}/python36/hello"
      - !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/demo/python36/hello"

  ApiPython36HelloParam:
    Description: The "hello" URL of the Python 3.6 API with a parameter
    Value: !If
      - UseCustomDomain
      - !Sub "https://${Domain}/python36/hello/you"
      - !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/demo/python36/hello/you"

  DistributionDomainName:
    Description: "The Amazon CloudFront distribution domain name that should be mapped to the custom domain name."
    Value: !If
      - UseCustomDomain
      - !GetAtt ["ApiGatewayDomain", "DistributionDomainName"]
      - "n/a"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label: "DNS Configuration"
        Parameters:
          - Domain
          - SslCertificateArn
          - HostedZoneName
    ParameterLabels:
      HostedZoneName:
        default: What is the name of the Route53 HostedZone that should be used?
      Domain:
        default: What domain will the API be served on?
      SslCertificateArn:
        default: What is the ARN of the ACM SSL certificate to use for the custom domain?
